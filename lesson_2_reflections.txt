What happens when you initialize a repository? Why do you need to do it?

Initializing a repository allows you set up a new repository with no commits. You will have to commit things before the repository is actually created.
It is needed to create a git repository and commit changes to said repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?

It is different from the working directory in that is shows you which files you are about to commit to your repository. It differs from a repository in 
that it is not a final version of your program. It is only a place to add possible commits to your repository. It allows you to look at each item you are 
about to commit to a project and decide if you want to add or remove something. This way if you mistakenly add a file that you do not want to commit, you 
are given a chance to correct your mistake. Almost like an Are You Sure? prompt from windows and certain websites.


How can you use the staging area to make sure you have one commit per logical change?

You can use the staging area to do this, by looking at the files you have added and making sure they only contain one logical change. If you have added 
multiple changes, then you can remove the extra file or can change the file to only have one logical change for the commit. You can then go back and add 
the other logical changes to the file and add another commit.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be great for doing changes like the one in the lesson. We made the game easier by changing the code. This allows us to keep our original 
game unchanged, while also making an easier mode for other people. If we wanted to add an easy mode to the original game, this branch could be used and 
we could add a difficulty option to the game. Branches allow for things that would change the project and still allow the master project to stay the same.
They can be very good for experimental changes, or changes you do not want entered into your game yet, but would like to be able to test and perfect first.


How do the diagrams help you visualize the branch structure?

The diagrams are helpful in that they give you something to look at to know where you are in a project. Just looking at the terminal output could end up 
confusing people and end up with them not knowing which branch they are on. When you checkout a branch a commit in git, all commits after seem like they never happened.
Using diagrams can help you understand what has changed after this commit without having to go back to the tip of the branch.